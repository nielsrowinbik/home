circadian_lighting:
  min_colortemp: 2200
  max_colortemp: 6500

input_boolean:
  night_mode:
    icon: mdi:weather-night
    name: Night mode

input_number:
  morning_threshold:
    icon: mdi:tune
    max: 10
    min: -10
    mode: box
    name: Morning threshold
    step: 0.1
    unit_of_measurement: "°"
  day_threshold:
    icon: mdi:tune
    max: 10
    min: -10
    mode: box
    name: Day threshold
    step: 0.1
    unit_of_measurement: "°"
  afternoon_threshold:
    icon: mdi:tune
    max: 10
    min: -10
    mode: box
    name: Afternoon threshold
    step: 0.1
    unit_of_measurement: "°"
  early_evening_threshold:
    icon: mdi:tune
    max: 10
    min: -10
    mode: box
    name: Early evening threshold
    step: 0.1
    unit_of_measurement: "°"
  evening_threshold:
    icon: mdi:tune
    max: 10
    min: -10
    mode: box
    name: Evening threshold
    step: 0.1
    unit_of_measurement: "°"
  night_threshold:
    icon: mdi:tune
    max: 10
    min: -10
    mode: box
    name: Night threshold
    step: 0.1
    unit_of_measurement: "°"

script:
  set_threshold:
    alias: Set a time of day threshold
    fields:
      entity:
        description: For which entity should we update the value?
        example: input_number.morning_threshold
    sequence:
      - service: input_number.set_value
        data:
          entity_id: "{{ entity }}"
          value: "{{ states('sensor.sun_elevation')|round(1) }}"
    mode: queued

sensor:
  - platform: template
    sensors:
      current_scene:
        friendly_name: Current scene
        icon_template: mdi:theme-light-dark
        value_template: >-
          {% if is_state('group.everyone', 'not_home') and not is_state('input_boolean.guest_mode', 'on') %}
            Away
          {% elif is_state('input_boolean.night_mode', 'on') %}
            Night
          {% elif is_state('sensor.time_of_day', 'Night') and is_state_attr('sun.sun', 'rising', true) %}
            Morning
          {% elif is_state('sensor.time_of_day', 'Night') and is_state_attr('sun.sun', 'rising', false) %}
            Evening
          {% else %}
            {{ states('sensor.time_of_day') }}
          {% endif %}
      colortemp: # https://community.home-assistant.io/t/circadian-light-with-philips-hue-independent-from-world-clocks/45435/43
        friendly_name: Circadian light
        unit_of_measurement: mireds
        value_template: >
          {% set deg = pi / 180.0 %}
          {% set N = now().strftime("%j")|int %}
          {% set L = state_attr('zone.home','latitude')|float %}
          {% set D = (-1 * asin(0.39779 * cos(0.98565 * deg * (N + 10) + 1.914 * deg * sin(0.98565 * deg * (N - 2))))) / deg %}
          {% set max_elevation = (asin(sin(L * deg) * sin(D * deg) + cos(L * deg) * cos(D * deg)) / deg)|round(2) %}

          {% set mired_min = 1000000 / 6500 %}
          {% set mired_max = 1000000 / 2200 %}
          {% set elev_at_mired_max = -6 %}
          {% set mired_night = mired_max %}

          {% if state_attr('sun.sun', 'elevation') > elev_at_mired_max %}
            {{ (mired_max - ((state_attr('sun.sun', 'elevation')|float) - elev_at_mired_max) * (mired_max - mired_min) / (max_elevation - elev_at_mired_max))|int }}
          {% else %}
            {{ mired_night }}
          {% endif %}
      colortemp2: # Converts Kelvin values from sensor.circadian_values to mireds
        friendly_name: Circadian light 2
        unit_of_measurement: mireds
        value_template: "{{ (1000000 / state_attr('sensor.circadian_values', 'colortemp')|float)|round }}"
      sun_elevation:
        friendly_name: Sun elevation
        icon_template: mdi:white-balance-sunny
        value_template: "{{ state_attr('sun.sun', 'elevation') }}"
        unit_of_measurement: "°"
      time_of_day:
        friendly_name: Time of day
        icon_template: mdi:calendar-clock
        value_template: >-
          {% set rising = is_state_attr('sun.sun', 'rising', true) %}
          {% set elevation = state_attr('sun.sun', 'elevation')|float %}

          {% set morning_threshold = states('input_number.morning_threshold')|float %}
          {% set day_threshold = states('input_number.day_threshold')|float %}
          {% set afternoon_threshold = states('input_number.afternoon_threshold')|float %}
          {% set early_evening_threshold = states('input_number.early_evening_threshold')|float %}
          {% set evening_threshold = states('input_number.evening_threshold')|float %}
          {% set night_threshold = states('input_number.night_threshold')|float %}

          {% if rising %}
            {% if elevation > day_threshold %}
              Day
            {% elif elevation > morning_threshold %}
              Morning
            {% else %}
              Night
            {% endif %}
          {% elif not rising %}
            {% if elevation < night_threshold %}
              Night
            {% elif elevation < evening_threshold %}
              Evening
            {% elif elevation < early_evening_threshold %}
              Early evening
            {% elif elevation < afternoon_threshold %}
              Afternoon
            {% else %}
              Day
            {% endif %}
          {% else %}
            Day
          {% endif %}

sun:
