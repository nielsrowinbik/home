automation:
  - alias: Update lights to new circadian values
    description: |
      Updates turned on lights to new circadian values, but only if their current settings match the old circadian values.
      Triggering this automation manually bypasses this check.
    trigger:
      - platform: state
        entity_id: sensor.time_of_day
    condition:
      # Only continue if the amount of lights that are on and whose current
      # temperature is set to the old circadian value is greater than 0.
      #
      # If this wasn't triggered by the time of day sensor, only continue
      # if there are any lights turned on that allow their brightness and/or
      # colour temperature to be changed.
      - condition: template
        value_template: >-
          {% if trigger is undefined %}
            {% set lightsBrightnessOnly = expand(states.light)
              |selectattr('state','eq','on')
              |selectattr('attributes.brightness', 'defined')
              |selectattr('attributes.color_temp', 'undefined')
              |list %}

            {% set lightsBrightnessAndTemp = expand(states.light)
              |selectattr('state','eq','on')
              |selectattr('attributes.brightness', 'defined')
              |selectattr('attributes.color_temp', 'defined')
              |list %}

            {% set lights = lightsBrightnessOnly + lightsBrightnessAndTemp %}
          {% else %}
            {% set brightnessToMatch = trigger.from_state.attributes.brightness|int %}
            {% set temperatureToMatch = trigger.from_state.attributes.color_temp|int %}

            {% set matchingBrightnessOnly = expand(states.light)
              |selectattr('state','eq','on')
              |selectattr('attributes.brightness', 'eq', brightnessToMatch)
              |selectattr('attributes.color_temp', 'undefined')
              |list %}

            {% set matchingBrightnessAndTemp = expand(states.light)
              |selectattr('state','eq','on')
              |selectattr('attributes.brightness', 'eq', brightnessToMatch)
              |selectattr('attributes.color_temp', 'eq', temperatureToMatch)
              |list %}
            
            {% set lights = matchingBrightnessOnly + matchingBrightnessAndTemp %}
          {% endif %}

          {{ lights|length > 0 }}
    action:
      - service: script.circadian_turn_on
        data:
          # Apply to all lights that are on and whose current settings match
          # the old circadian values. Match lights that only allow setting the brightness
          # separately.
          #
          # If this wasn't triggered by the time of day sensor, bypass the match with the
          # old values, and update all lights currently on.
          entity_id: >-
            {% if trigger is undefined %}
              {% set lightsBrightnessOnly = expand(states.light)
                |selectattr('state','eq','on')
                |selectattr('attributes.brightness', 'defined')
                |selectattr('attributes.color_temp', 'undefined')
                |list %}

              {% set lightsBrightnessAndTemp = expand(states.light)
                |selectattr('state','eq','on')
                |selectattr('attributes.brightness', 'defined')
                |selectattr('attributes.color_temp', 'defined')
                |list %}

              {% set lights = lightsBrightnessOnly + lightsBrightnessAndTemp %}
            {% else %}
              {% set brightnessToMatch = trigger.from_state.attributes.brightness|int %}
              {% set temperatureToMatch = trigger.from_state.attributes.color_temp|int %}

              {% set matchingBrightnessOnly = expand(states.light)
                |selectattr('state','eq','on')
                |selectattr('attributes.brightness', 'eq', brightnessToMatch)
                |selectattr('attributes.color_temp', 'undefined')
                |list %}

              {% set matchingBrightnessAndTemp = expand(states.light)
                |selectattr('state','eq','on')
                |selectattr('attributes.brightness', 'eq', brightnessToMatch)
                |selectattr('attributes.color_temp', 'eq', temperatureToMatch)
                |list %}
              
              {% set lights = matchingBrightnessOnly + matchingBrightnessAndTemp %}
            {% endif %}

            {{ lights
              |map(attribute='entity_id')
              |join(',') }}
          transition: "{{ 0.5 if trigger is undefined else 30 }}"

input_number:
  setting_max_brightness:
    max: 100
    min: 1
    name: Maximum brightness
    step: 1
    unit_of_measurement: "%"
  setting_min_brightness:
    max: 100
    min: 1
    name: Minimum brightness
    step: 1
    unit_of_measurement: "%"
  setting_coolest_colour_temp:
    max: 454
    min: 154
    name: Coolest colour temperature
    step: 1
    unit_of_measurement: mireds
  setting_warmest_colour_temp:
    max: 454
    min: 154
    name: Warmest colour temperature
    step: 1
    unit_of_measurement: mireds
  setting_day_threshold:
    max: 15
    min: -15
    name: Day threshold
    step: 0.5
    unit_of_measurement: °
  setting_afternoon_threshold:
    max: 15
    min: -15
    name: Afternoon threshold
    step: 0.5
    unit_of_measurement: °
  setting_early_evening_threshold:
    max: 15
    min: -15
    name: Early evening threshold
    step: 0.5
    unit_of_measurement: °
  setting_evening_threshold:
    max: 15
    min: -15
    name: Evening threshold
    step: 0.5
    unit_of_measurement: °
  setting_night_threshold:
    max: 15
    min: -15
    name: Night threshold
    step: 0.5
    unit_of_measurement: °

script:
  circadian_turn_on:
    alias: Set a light to current circadian value
    fields:
      entity_id:
        description: For which entity should we update the value?
        example: light.living_room_spots
      transition:
        description: Which transition should we use?
        example: 60
    sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ entity_id }}"
          brightness: "{{ state_attr('sensor.time_of_day', 'brightness')|int }}"
          color_temp: "{{ state_attr('sensor.time_of_day', 'color_temp')|int }}"
          transition: "{{ transition or 0.5 }}"
    mode: restart

sensor:
  - platform: sun2
    monitored_conditions:
      - elevation
      - max_elevation
  - platform: template
    sensors:
      current_scene:
        friendly_name: Current scene
        icon_template: mdi:theme-light-dark
        value_template: >-
          {% if is_state('group.everyone', 'not_home') and not is_state('input_boolean.guest_mode', 'on') %}
            Away
          {% elif is_state('input_boolean.bedtime_mode', 'on') %}
            Night
          {% elif is_state('sensor.time_of_day', 'Night') and is_state_attr('sun.sun', 'rising', true) %}
            Morning
          {% elif is_state('sensor.time_of_day', 'Night') and is_state_attr('sun.sun', 'rising', false) %}
            Evening
          {% else %}
            {{ states('sensor.time_of_day') }}
          {% endif %}
      time_of_day:
        attribute_templates:
          brightness: >-
            {% set todays_alarm = state_attr('input_datetime.todays_alarm', 'timestamp') %}
            {% set todays_bedtime = state_attr('input_datetime.todays_bedtime', 'timestamp') %}
            {% set is_past_todays_alarm = is_state('binary_sensor.is_past_alarm', 'on') %}
            {% set is_past_todays_bedtime = is_state('binary_sensor.is_past_bedtime', 'on') %}
            {% set now = (now().hour * 60 + now().minute) * 60 + now().second %}

            {% set window_size = 60 * 60 %}

            {% set dimming_window_start = todays_bedtime - window_size %}
            {% set dimming_window_end = todays_bedtime %}
            {% set is_within_dimming_window = dimming_window_start <= now < dimming_window_end %}
            {% set brightening_window_start = todays_alarm %}
            {% set brightening_window_end = todays_alarm + window_size %}
            {% set is_within_brightening_window = brightening_window_start <= now < brightening_window_end %}

            {% set brightest = states('input_number.setting_max_brightness')|int %}
            {% set dimmest = states('input_number.setting_min_brightness')|int %}
            {% set diff_brightness = brightest - dimmest %}

            {% if is_within_brightening_window %}
              {% set prog_time = ((now - brightening_window_start) / window_size)|abs %}
              {% set brightness_pct = prog_time * diff_brightness + dimmest %}
            {% elif is_within_dimming_window %}
              {% set prog_time = ((now - dimming_window_start) / window_size)|abs %}
              {% set brightness_pct = (1 - prog_time) * diff_brightness + dimmest %}
            {% elif is_past_todays_alarm and not is_past_todays_bedtime %}
              {% set brightness_pct = brightest %}
            {% else %}
              {% set brightness_pct = dimmest %}
            {% endif %}

            {{ (brightness_pct / 100 * 255)|int }}
          color_temp: >-
            {% set cur_elevation = states('sensor.elevation')|float %}
            {% set max_elevation = states('sensor.max_elevation')|float %}

            {% set coolest = states('input_number.setting_coolest_colour_temp')|int %}
            {% set warmest = states('input_number.setting_warmest_colour_temp')|int %}
            {% set night_threshold = states('input_number.setting_night_threshold')|float %}

            {% if cur_elevation > night_threshold %}
              {{ (warmest - (cur_elevation - night_threshold) * (warmest - coolest) / (max_elevation - night_threshold) )|int }}
            {% else %}
              {{ warmest }}
            {% endif %}
        friendly_name: Time of day
        icon_template: mdi:calendar-clock
        value_template: >-
          {% set rising = is_state_attr('sun.sun', 'rising', true) %}
          {% set elevation = states('sensor.elevation')|float %}

          {% set day_threshold = states('input_number.setting_day_threshold')|float %}
          {% set afternoon_threshold = states('input_number.setting_afternoon_threshold')|float %}
          {% set early_evening_threshold = states('input_number.setting_early_evening_threshold')|float %}
          {% set evening_threshold = states('input_number.setting_evening_threshold')|float %}
          {% set night_threshold = states('input_number.setting_night_threshold')|float %}

          {% if rising %}
            {% if elevation > day_threshold %}
              Day
            {% elif elevation > night_threshold %}
              Morning
            {% else %}
              Night
            {% endif %}
          {% elif not rising %}
            {% if elevation < night_threshold %}
              Night
            {% elif elevation < evening_threshold %}
              Evening
            {% elif elevation < early_evening_threshold %}
              Early evening
            {% elif elevation < afternoon_threshold %}
              Afternoon
            {% else %}
              Day
            {% endif %}
          {% else %}
            Day
          {% endif %}

# Only really needed for the "rising" attribute. TODO: See if we can find another solution for this.
sun:
