automation:
  - alias: Set bathroom lights state
    description: Turns on the bathroom lights when it's occupied and off when it's not
    trigger:
      # Trigger immediately when Home Assistant starts
      - platform: homeassistant
        event: start

      # Trigger immediately when current scene changes
      - platform: state
        entity_id: sensor.current_scene
        to: "*"

      # Trigger immediately when the bathroom is occupied
      - platform: state
        entity_id: binary_sensor.bathroom_occupied
        to: "on"

      # Trigger a minute after the bathroom is no longer occupied
      - platform: state
        entity_id: binary_sensor.bathroom_occupied
        to: "off"
        for:
          minutes: 1
    action:
      - service: script.set_bathroom_lights_state

  - alias: Notify when humidity in Bathroom reaches high levels
    description: Send a notification suggesting to turn on the dehumidifier in this area when the humidity is more than 80%
    trigger:
      # Trigger immediately when the humidity goes above 79%
      - platform: numeric_state
        entity_id: sensor.bathroom_humidity
        above: 79
    action:
      - service: notify.all_devices
        data:
          title: "High humidity in Bathroom"
          message: "Consider turning on the dehumidifier{{ ' when you get home' if is_state('sensor.current_scene', 'Away') else '' }}"
          data:
            channel: Suggestions

  - alias: Notify when humidity in Bathroom reaches normal levels
    description: Send a notification suggesting to turn off the dehumidifier in this area when the humidity is back down to 60%
    trigger:
      # Trigger immediately when the humidity drops below 61%
      - platform: numeric_state
        entity_id: sensor.bathroom_humidity
        below: 61
    action:
      - service: notify.all_devices
        data:
          title: "Humidity returned to normal in Bathroom"
          message: "Consider turning off the dehumidifier{{ ' when you get home' if is_state('sensor.current_scene', 'Away') else '' }}"
          data:
            channel: Suggestions

binary_sensor:
  - platform: template
    sensors:
      bathroom_occupied:
        device_class: occupancy
        friendly_name: Bathroom occupied
        value_template: "{{ is_state('group.bathroom_occupied', 'on') }}"

group:
  bathroom_occupied:
    name: Bathroom occupied
    entities:
      - binary_sensor.bathroom_motion
      # - binary_sensor.shower_in_use

light:
  - platform: mqtt
    brightness: true
    command_topic: "zigbee2mqtt/bathroom_spots/set"
    name: Bathroom spots
    schema: json
    state_topic: "zigbee2mqtt/bathroom_spots"

script:
  set_bathroom_lights_state:
    alias: Set bathroom lights state
    mode: restart
    sequence:
      - choose:
          # IF the bathroom is occupied
          - conditions:
              - condition: state
                entity_id: binary_sensor.bathroom_occupied
                state: "on"
            sequence:
              - choose:
                  # IF "Night" scene is active
                  - conditions:
                      - condition: state
                        entity_id: sensor.current_scene
                        state: Night
                    sequence:
                      - service: scene.apply
                        data:
                          entities:
                            light.bathroom_spots:
                              brightness: 1
                              state: on
                          transition: 0.5

                # ELSE (any other scene is active)
                default:
                  - service: scene.apply
                    data:
                      entities:
                        light.bathroom_spots:
                          brightness: 255
                          state: on
                      transition: 0.5

        # ELSE (off by default)
        default:
          - service: scene.apply
            data:
              entities:
                light.bathroom_spots: off
              transition: 0.5
