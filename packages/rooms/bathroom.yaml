automation:
  - alias: Set light.bathroom_spots
    mode: queued
    trigger:
      # Trigger immediately when Home Assistant starts
      - platform: homeassistant
        event: start

      # Trigger immediately when current scene changes to a state we're interested in
      - platform: state
        entity_id: sensor.current_scene
        to: Night

      # Trigger immediately when current scene changes from a state we're interested in
      - platform: state
        entity_id: sensor.current_scene
        from: Night

      # Trigger immediately when the bathroom is occupied
      - platform: state
        entity_id: binary_sensor.bathroom_occupied
        to: "on"

      # Trigger a minute after the bathroom is no longer occupied
      - platform: state
        entity_id: binary_sensor.bathroom_occupied
        to: "off"
        for:
          minutes: 1
    action:
      - service: light.turn_on
        data:
          entity_id: light.bathroom_spots
          brightness: >-
            {% set isOccupied = is_state('binary_sensor.bathroom_occupied', 'on') %}
            {% set isNight = is_state('sensor.current_scene', 'Night') %}

            {% if isOccupied and not isNight %}
              255
            {% elif isOccupied and isNight %}
              1
            {% else %}
              0
            {% endif %}
          transition: 0.5

binary_sensor:
  - platform: template
    sensors:
      bathroom_occupied:
        device_class: occupancy
        friendly_name: Bathroom occupied
        value_template: "{{ is_state('group.bathroom_occupied', 'on') }}"

group:
  bathroom_occupied:
    name: Bathroom occupied
    entities:
      - binary_sensor.bathroom_motion
      # - binary_sensor.shower_in_use

light:
  - platform: mqtt
    brightness: true
    command_topic: "zigbee2mqtt/bathroom_spots/set"
    name: Bathroom spots
    schema: json
    state_topic: "zigbee2mqtt/bathroom_spots"
