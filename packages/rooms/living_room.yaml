automation:
  - alias: Set correct Harmony activity
    description: Sets the correct Harmony Hub activity when one of the media devices turns on on its own
    mode: restart
    trigger:
      # Trigger immediately when the amplifier is ready
      - platform: state
        entity_id: binary_sensor.amplifier_ready
        from: "off"
        to: "on"
    action:
      # only continue if the Harmony Hub does not currently have an active activity
      # and it's not starting an activity
      - condition: template
        value_template: "{{ is_state_attr('remote.living_room_harmony_hub', 'current_activity', 'PowerOff') and state_attr('remote.living_room_harmony_hub', 'activity_starting') == None }}"

      # Set the correct Harmony Hub activity
      - service: remote.turn_on
        data:
          entity_id: remote.living_room_harmony_hub
          activity: >-
            {% set currentSource = state_attr('media_player.amplifier', 'source') %}
            {% set xBoxIsOn = is_state('media_player.xbox_one', 'on') %}

            {% if currentSource == 'Wireless' %}
              Listen to Music
            {% elif currentSource == 'TV' %}
              Listen to Vinyl
            {% elif currentSource == 'Opt2' and xBoxIsOn %}
              Play a Game
            {% elif currentSource == 'Opt2' and not xBoxIsOn %}
              Watch TV
            {% else %}
            {% endif %}

  - alias: Set correct input on amplifier
    description: Sets the correct input on the amplifier when a Harmony activity is activated
    mode: restart
    trigger:
      # Trigger when the currently active activity is in the list of possible activities (meaning we switched to on or to a different activity)
      - platform: template
        value_template: "{{ state_attr('remote.living_room_harmony_hub', 'activity_starting') in state_attr('remote.living_room_harmony_hub', 'activity_list') }}"
    action:
      # Wait until the amplifier is marked as ready
      - wait_template: "{{ is_state('binary_sensor.amplifier_ready', 'on') }}"

      # Switch to the correct input
      - service: media_player.select_source
        data:
          entity_id: media_player.amplifier
          source: >-
            {% set currentActivity = state_attr('remote.living_room_harmony_hub', 'current_activity') %}
            {% set activitySourceMap = {
              "Play a Game": "Opt2",
              "Watch TV": "Opt2",
              "Listen to Music": "Wireless",
              "Listen to Vinyl": "TV"
            } %}

            {{ activitySourceMap[currentActivity] }}

  - alias: Set light.living_room_pendant
    mode: queued
    trigger:
      # Trigger immediately when Home Assistant starts
      - platform: homeassistant
        event: start

      # Trigger immediately when automations are reloaded
      - platform: event
        event_type: automation_reloaded

      # Trigger immediately when current scene changes
      - platform: state
        entity_id: sensor.current_scene
        to: "*"

      # Trigger immediately when movie mode is toggled
      - platform: state
        entity_id: input_boolean.movie_mode
        to:
          - "on"
          - "off"

      # Trigger immediately when Living Room TV playback changes to playing
      - platform: state
        entity_id: media_player.living_room_android_tv
        to:
          - playing

      # Trigger immediately when Living Room TV playback changes from playing
      - platform: state
        entity_id: media_player.living_room_android_tv
        from:
          - playing
    action:
      - service: light.turn_on
        data:
          entity_id: light.living_room_pendant
          brightness: >-
            {% set isAway = is_state('sensor.current_scene', 'Away') %}
            {% set isDay = is_state('sensor.current_scene', 'Day') %}
            {% set isMediaPaused = is_state('media_player.living_room_android_tv', 'paused') or is_state('media_player.living_room_android_tv', 'idle') %}
            {% set isMovie = is_state('input_boolean.movie_mode', 'on') %}
            {% set isNight = is_state('sensor.current_scene', 'Night') %}

            {% if isAway or isDay or isNight %}
              0
            {% elif isMovie %}
              {% if isMediaPaused %}
                30
              {% else %}
                1
              {% endif %}
            {% else %}
              {{ state_attr('sensor.time_of_day', 'brightness')|int }}
            {% endif %}
          transition: 2

  - alias: Set light.living_room_spots
    mode: queued
    trigger:
      # Trigger immediately when Home Assistant starts
      - platform: homeassistant
        event: start

      # Trigger immediately when automations are reloaded
      - platform: event
        event_type: automation_reloaded

      # Trigger immediately when current scene changes
      - platform: state
        entity_id: sensor.current_scene
        to: "*"

      # Trigger immediately when bright mode is toggled
      - platform: state
        entity_id: input_boolean.living_room_bright_mode
        to:
          - "on"
          - "off"

      # Trigger immediately when movie mode is toggled
      - platform: state
        entity_id: input_boolean.movie_mode
        to:
          - "on"
          - "off"

      # Trigger immediately when Living Room TV playback changes to playing
      - platform: state
        entity_id: media_player.living_room_android_tv
        to:
          - playing

      # Trigger immediately when Living Room TV playback changes from playing
      - platform: state
        entity_id: media_player.living_room_android_tv
        from:
          - playing
    action:
      - service: light.turn_on
        data:
          entity_id: light.living_room_spots
          brightness: >-
            {% set isAfternoon = is_state('sensor.current_scene', 'Afternoon') %}
            {% set isAway = is_state('sensor.current_scene', 'Away') %}
            {% set isBright = is_state('input_boolean.living_room_bright_mode', 'on') %}
            {% set isEarlyEvening = is_state('sensor.current_scene', 'Early evening') %}
            {% set isEvening = is_state('sensor.current_scene', 'Evening') %}
            {% set isMediaPaused = is_state('media_player.living_room_android_tv', 'paused') or is_state('media_player.living_room_android_tv', 'idle') %}
            {% set isMorning = is_state('sensor.current_scene', 'Morning') %}
            {% set isMovie = is_state('input_boolean.movie_mode', 'on') %}

            {% if isBright %}
              255
            {% elif isMovie %}
              {% if isMediaPaused %}
                125
              {% else %}
                30
              {% endif %}
            {% elif isMorning or isAfternoon or isEarlyEvening or isEvening %}
              {{ state_attr('sensor.time_of_day', 'brightness')|int }}
            {% else %}
              0
            {% endif %}
          color_temp: >-
            {% set isMovie = is_state('input_boolean.movie_mode', 'on') %}

            {{ 454 if isMovie else state_attr('sensor.time_of_day', 'color_temp')|int }}
          transition: "{{ 0.5 if is_state('input_boolean.living_room_bright_mode', 'on') else 2 }}"

  - alias: Set switch.subwoofer
    mode: queued
    trigger:
      # Trigger immediately when Home Assistant starts
      - platform: homeassistant
        event: start

      # Trigger immediately when automations are reloaded
      - platform: event
        event_type: automation_reloaded

      # Trigger immediately when the amplifier turns on or off
      - platform: state
        entity_id: media_player.amplifier
        to:
          - "on"
          - "off"
    action:
      - service: "switch.turn_{{ 'on' if is_state('media_player.amplifier', 'on') else 'off' }}"
        data:
          entity_id: switch.subwoofer

binary_sensor:
  - platform: mqtt
    device_class: door
    name: Living Room door
    payload_off: true
    payload_on: false
    state_topic: zigbee2mqtt/living_room_door_sensor
    value_template: "{{ value_json.contact }}"
  - platform: mqtt
    device_class: window
    name: Living Room window
    payload_off: true
    payload_on: false
    state_topic: zigbee2mqtt/living_room_window_sensor
    value_template: "{{ value_json.contact }}"
  - platform: template
    sensors:
      amplifier_ready:
        friendly_name: Amplifier ready
        delay_on:
          seconds: 7
        value_template: "{{ is_state('media_player.amplifier', 'on') }}"

group:
  living_room_lights:
    name: Living Room lights
    entities:
      - light.living_room_pendant
      - light.living_room_spots

input_boolean:
  living_room_bright_mode:
    icon: mdi:brightness-7
    name: Bright mode (Living Room)
  movie_mode:
    icon: mdi:filmstrip
    name: Movie mode

light:
  - platform: mqtt
    brightness: true
    command_topic: zigbee2mqtt/living_room_pendant_light/set
    name: Living room pendant
    schema: json
    state_topic: zigbee2mqtt/living_room_pendant_light
  - platform: mqtt
    brightness: true
    color_temp: true
    command_topic: zigbee2mqtt/living_room_spots/set
    name: Living room spots
    schema: json
    state_topic: zigbee2mqtt/living_room_spots

media_player:
  - platform: androidtv
    name: Living Room Android TV
    host: 192.168.1.21
  - platform: nadtcp2
    name: Amplifier
    host: 192.168.1.20
    volume_step: 2

switch:
  - platform: mqtt
    command_topic: zigbee2mqtt/power_outlet_3/set
    name: Subwoofer
    state_topic: zigbee2mqtt/power_outlet_3
    value_template: "{{ value_json.state }}"
