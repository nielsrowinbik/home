automation:
  - alias: Update lights to new circadian values
    trigger:
      - platform: state
        entity_id: sensor.circadian_values
    condition:
      # Only continue if the amount of lights that are on and whose current
      # temperature is set to the old circadian value is greater than 0
      - condition: template
        value_template: >-
          {% set brightnessToMatch = trigger.from_state.attributes.brightness|int %}
          {% set temperatureToMatch = trigger.from_state.attributes.color_temp|int %}

          {% set matchingBrightnessOnly = expand(states.light)
            |selectattr('state','eq','on')
            |selectattr('attributes.brightness', 'eq', brightnessToMatch)
            |selectattr('attributes.color_temp', 'undefined')
            |list %}

          {% set matchingBrightnessAndTemp = expand(states.light)
            |selectattr('state','eq','on')
            |selectattr('attributes.brightness', 'eq', brightnessToMatch)
            |selectattr('attributes.color_temp', 'eq', temperatureToMatch)
            |list %}

          {{ (matchingBrightnessOnly + matchingBrightnessAndTemp)|length > 0 }}
    action:
      - service: script.circadian_turn_on
        data:
          # Apply to all lights that are on and whose current settings match
          # the old circadian values. Match lights that only allow setting the brightness
          # separately.
          entity_id: >-
            {% set brightnessToMatch = trigger.from_state.attributes.brightness|int %}
            {% set temperatureToMatch = trigger.from_state.attributes.color_temp|int %}

            {% set matchingBrightnessOnly = expand(states.light)
              |selectattr('state','eq','on')
              |selectattr('attributes.brightness', 'eq', brightnessToMatch)
              |selectattr('attributes.color_temp', 'undefined')
              |list %}

            {% set matchingBrightnessAndTemp = expand(states.light)
              |selectattr('state','eq','on')
              |selectattr('attributes.brightness', 'eq', brightnessToMatch)
              |selectattr('attributes.color_temp', 'eq', temperatureToMatch)
              |list %}

            {{ (matchingBrightnessOnly + matchingBrightnessAndTemp)
              |map(attribute='entity_id')
              |join(',') }}
          # Use a transition based on whether the percentage has changed. If it hasn't, one of
          # the settings was probably tweaked and we should switch to the new values quickly.
          # Otherwise, use a slow transition of a minute.
          transition: "{{ 0.5 if trigger.from_state.state == trigger.to_state.state else 60 }}"

input_number:
  setting_max_brightness:
    max: 100
    min: 1
    name: Maximum brightness
    step: 1
    unit_of_measurement: "%"
  setting_min_brightness:
    max: 100
    min: 1
    name: Minimum brightness
    step: 1
    unit_of_measurement: "%"
  setting_coolest_colour_temp:
    max: 10000
    min: 1000
    name: Coolest colour temperature
    step: 100
    unit_of_measurement: K
  setting_warmest_colour_temp:
    max: 10000
    min: 1000
    name: Warmest colour temperature
    step: 100
    unit_of_measurement: K
  setting_night_threshold:
    max: 10
    min: -10
    name: Night threshold
    step: 0.1
    unit_of_measurement: Â°

script:
  circadian_turn_on:
    alias: Set a light to current circadian value
    fields:
      entity_id:
        description: For which entity should we update the value?
        example: light.living_room_spots
      transition:
        description: Which transition should we use?
        example: 60
    sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ entity_id }}"
          brightness: "{{ state_attr('sensor.circadian_values', 'brightness')|int }}"
          color_temp: "{{ state_attr('sensor.circadian_values', 'color_temp')|int }}"
          transition: "{{ transition or 0.5 }}"
    mode: restart

sensor:
  - platform: sun2
    monitored_conditions:
      - elevation
      - max_elevation
      - min_elevation
  - platform: template
    sensors:
      circadian_values:
        attribute_templates:
          brightness: >-
            {% set percent = states('sensor.circadian_values')|float %}
            {% set dimmest = states('input_number.setting_min_brightness')|int %}
            {% set brightest = states('input_number.setting_max_brightness')|int %}

            {% set brightness_pct = brightest if percent > 0 else ((brightest - dimmest) * ((100 + percent) / 100)) + dimmest %}

            {{ (brightness_pct / 100 * 254)|int }}
          color_temp: >-
            {% set percent = states('sensor.circadian_values')|float %}
            {% set coolest = states('input_number.setting_coolest_colour_temp')|int %}
            {% set warmest = states('input_number.setting_warmest_colour_temp')|int %}

            {% set kelvin = warmest if percent <= 0 else ((coolest - warmest) * (percent / 100)) + warmest %}

            {{ (1000000 / kelvin)|int }}
        friendly_name: Circadian values
        unit_of_measurement: "%"
        value_template: >-
          {% set current_elevation = states('sensor.elevation')|float|round(1) %}
          {% set maximum_elevation = states('sensor.max_elevation')|float|round(1) %}
          {% set minimum_elevation = states('sensor.min_elevation')|float|round(1) %}
          {% set night_threshold = states('input_number.night_threshold')|float|round(1) %}

          {% if current_elevation < 0 %}
            {{ ((current_elevation / minimum_elevation) * -100)|round(1) }}
          {% elif current_elevation > 0 %}
            {{ (current_elevation / maximum_elevation * 100)|round(1) }}
          {% else %}
            {{ 0 }}
          {% endif %}
      temp_circadian_brightness:
        friendly_name: Circadian brightness
        value_template: "{{ state_attr('sensor.circadian_values', 'brightness')|int }}"
      temp_circadian_color_temp:
        friendly_name: Circadian colour temperature
        unit_of_measurement: mireds
        value_template: "{{ state_attr('sensor.circadian_values', 'color_temp')|int }}"
