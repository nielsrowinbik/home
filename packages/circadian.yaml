automation:
  - alias: Update lights to new circadian values
    trigger:
      - platform: state
        entity_id: sensor.circadian_brightness
      - platform: state
        entity_id: sensor.circadian_temperature
    condition:
      # Only continue if the amount of lights that are on and whose current
      # temperature is set to the old circadian value is greater than 0
      - condition: template
        value_template: >-
          {% set brightnessToMatch = trigger.from_state.state if trigger.entity_id == 'sensor.circadian_brightness' else states('sensor.circadian_brightness') %}
          {% set temperatureToMatch = trigger.from_state.state if trigger.entity_id == 'sensor.circadian_temperature' else states('sensor.circadian_temperature') %}

          {{ expand(states.light)
            |selectattr('state','eq','on')
            |selectattr('attributes.brightness', 'eq', brightnessToMatch)
            |selectattr('attributes.color_temp', 'eq', temperatureToMatch)
            |list
            |length > 0 }}
    action:
      - service: script.circadian_turn_on
        data:
          # Apply to all lights that are on and whose current
          # temperature is set to the old circadian value
          entity_id: >-
            {% set brightnessToMatch = trigger.from_state.state if trigger.entity_id == 'sensor.circadian_brightness' else states('sensor.circadian_brightness') %}
            {% set temperatureToMatch = trigger.from_state.state if trigger.entity_id == 'sensor.circadian_temperature' else states('sensor.circadian_temperature') %}

            {{ expand(states.light)
              |selectattr('state','eq','on')
              |selectattr('attributes.brightness', 'eq', brightnessToMatch)
              |selectattr('attributes.color_temp', 'eq', temperatureToMatch)
              |map(attribute='entity_id')
              |join(',') }}
          # Use a transition of a minute
          transition: 60

input_number:
  setting_max_brightness:
    max: 254
    min: 1
    name: Maximum brightness
    step: 1
  setting_min_brightness:
    max: 254
    min: 1
    name: Minimum brightness
    step: 1
  setting_coolest_colour_temp:
    max: 454
    min: 154
    name: Coolest colour temperature
    step: 1
    unit_of_measurement: K
  setting_warmest_colour_temp:
    max: 454
    min: 154
    name: Warmest colour temperature
    step: 1
    unit_of_measurement: K
  setting_night_threshold:
    max: 10
    min: -10
    name: Night threshold
    step: 0.1
    unit_of_measurement: Â°

script:
  circadian_turn_on:
    alias: Set a light to current circadian value
    fields:
      entity_id:
        description: For which entity should we update the value?
        example: light.living_room_spots
      transition:
        description: Which transition should we use?
        example: 60
    sequence:
      - service: light.turn_on
        data:
          entity_id: "{{ entity_id }}"
          brightness: "{{ states('sensor.circadian_brightness')|int }}"
          color_temp: "{{ states('sensor.circadian_temperature')|int }}"
          transition: "{{ transition or 0.5 }}"
    mode: restart

sensor:
  - platform: sun2
    monitored_conditions:
      - elevation
      - max_elevation
  - platform: template
    sensors:
      circadian_brightness:
        friendly_name: Circadian brightness
        value_template: >-
          {% set dimmest = states('input_number.setting_min_brightness')|int %}
          {% set brightest = states('input_number.setting_max_brightness')|int %}
          {% set night_threshold = states('input_number.night_threshold')|float %}

          {% set current_elevation = states('sensor.elevation')|float %}
          {% set maximum_elevation = states('sensor.max_elevation')|float %}

          {{ (dimmest - (current_elevation - night_threshold) * (dimmest - brightest) / (maximum_elevation - night_threshold))|int }}
      circadian_temperature:
        friendly_name: Circadian temperature
        unit_of_measurement: mired
        value_template: >-
          {% set coolest = states('input_number.setting_coolest_colour_temp')|int %}
          {% set warmest = states('input_number.setting_warmest_colour_temp')|int %}
          {% set night_threshold = states('input_number.night_threshold')|float %}

          {% set current_elevation = states('sensor.elevation')|float %}
          {% set maximum_elevation = states('sensor.max_elevation')|float %}

          {% if current_elevation > night_threshold %}
            {{ (warmest - (current_elevation - night_threshold) * (warmest - coolest) / (maximum_elevation - night_threshold))|int }}
          {% else %}
            {{ warmest }}
          {% endif %}
